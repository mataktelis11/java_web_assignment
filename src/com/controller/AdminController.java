package com.controller;


import java.io.IOException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.dao.AdminDao;
import com.dao.DoctorDao;
import com.dao.HospitalDao;
import com.dao.PatientDao;
import com.model.Appointment;
import com.model.Doctor;
import com.model.Hospital;
import com.model.Patient;
import com.util.Encryption;
import com.util.Generator;
import com.util.Validate;



/**
 * 
 * Class that extends <b>HttpServlet</b>.
 * Simulates the function is the Admins<br>
 * 
 * @authors telis, vasilis, atnwnis
 * 
 */
@WebServlet("/admin")
public class AdminController extends HttpServlet {

	/**
	 * Autogenerated identifier used for <b>serialization</b> and <b>deserialization</b>.
	 */
	private static final long serialVersionUID = -3181915305413793528L;
	private PatientDao dao;
	private Generator gen;
	private HospitalDao hdao;
	private DoctorDao ddao;
	private AdminDao adao;

	public AdminController() {
		super();
		dao = new PatientDao();
		gen = new Generator();
		hdao = new HospitalDao();
		ddao = new DoctorDao();
		adao = new AdminDao();
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		String forward="";
		String action = request.getParameter("action");
		response.setContentType("text/html; charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
		request.setCharacterEncoding("UTF-8");
		
		HttpSession session = request.getSession(false);
		
		//check if session exists
		if(session == null) {
			forward = "/falseRequest.jsp";
		}
		//check if session Attribute exists
		else if(session.getAttribute("role") == null) {
			forward = "/falseRequest.jsp";
		}
		//check if the user is a doctor
		else if(!(session.getAttribute("role").equals("admin"))) {
			forward = "/falseRequest.jsp";
		}
		else {
			
			
			if(action.equalsIgnoreCase("appointments")) {
				forward = "/admin/appointments.jsp";
			}
			
			
			
			else if(action.equalsIgnoreCase("welcome")) {
				forward = "/admin/welcomeadmin.jsp";
				request.setAttribute("Admin", adao.getDetails((String)session.getAttribute("username")));
			}
			
			
			
			else if(action.equalsIgnoreCase("addpatient")) {
				forward = "/admin/addpatient.jsp";
				request.setAttribute("message", "nomessage");
			}
			
			
			
			else if(action.equalsIgnoreCase("adddoctor")) {
				forward = "/admin/adddoctor.jsp";
				request.setAttribute("Hospitals", hdao.getHospitals());
				request.setAttribute("message", "nomessage");
				request.setAttribute("Doctors", ddao.getAllDoctors());
			}
			
			
			
			else if(action.equalsIgnoreCase("addhospital")) {
				forward = "/admin/addhospital.jsp";
				request.setAttribute("Hospitals", hdao.getHospitals());
				request.setAttribute("message", "nomessage");
			}
			
			
			
			else if(action.equalsIgnoreCase("delete")) {
				forward = "/admin/adddoctor.jsp";
				request.setAttribute("Hospitals", hdao.getHospitals());
				
				String username = request.getParameter("DoctorUsername");
				String amka = request.getParameter("DoctorAMKA");
				
				//check
				if(removeDoctor(username, amka))
					request.setAttribute("message", "Doctor removed successfully.");
				else
					request.setAttribute("message", "Doctor cannot be removed.");
				
				request.setAttribute("Doctors", ddao.getAllDoctors());
			}
		}
		
		RequestDispatcher view = request.getRequestDispatcher(forward);
		view.forward(request, response);
	}
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		HttpSession session = request.getSession(false);
		
		
		String forward = "";
		String action = request.getParameter("action");
		response.setContentType("text/html; charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
		request.setCharacterEncoding("UTF-8");
		
		
		if(action.equalsIgnoreCase("insertpatient")) {
			
			forward = "/admin/addpatient.jsp";
			
			
			Patient p = new Patient();
			
			//get data from the request
			String name = request.getParameter("name");
			String surName = request.getParameter("surname");
			String amka = request.getParameter("amka");
			String username = request.getParameter("username");
			String password = request.getParameter("psw");

			
			//check data
			if(Validate.validAMKA(amka) && Validate.validPass(password)) {
				//pass data to object
				p.setName(name);
				p.setSurname(surName);
				p.setSalt(gen.generate(16));
				p.setPassword(Encryption.getHashMD5(password, p.getSalt()));
				p.setUsername(username);
				p.setAMKA(amka);
				
				//call dao
				int check = dao.addPatient(p);
				
				if(check == 1) {
					request.setAttribute("message", "Patient added successfully");
				}
					
				else {
					request.setAttribute("message", "Failed to add patient.");
				}
			
			
			}
			else {
				request.setAttribute("message", "Failed to add patient.");
			}
		}
		
		
		
		else if(action.equalsIgnoreCase("insertdoctor")) {
			
			forward = "/admin/adddoctor.jsp";
			
			Doctor d = new Doctor();
			
			String name = request.getParameter("name");
			String surName = request.getParameter("surname");
			String amka = request.getParameter("amka");
			String username = request.getParameter("username");
			String password = request.getParameter("psw");
			String speciality = request.getParameter("sp");
			String hospital = request.getParameter("hospital");
			
			//check data
			if(Validate.validAMKA(amka) && Validate.validPass(password)) {
			
				d.setName(name);
				d.setSurname(surName);
				d.setAMKA(amka);
				d.setUsername(username);
				
				d.setSalt(gen.generate(16));
				d.setPassword(Encryption.getHashMD5(password, d.getSalt()));
				
				d.setAdmin((String)session.getAttribute("username"));
				
				d.setSpeciality(speciality);
				d.setHospital(new Hospital(hospital));
				
				
				//call dao
				int check = ddao.addDoctor(d);
				
				if(check == 1) {
					request.setAttribute("message", "Doctor added successfully.");
					request.setAttribute("Hospitals", hdao.getHospitals());
					request.setAttribute("Doctors", ddao.getAllDoctors());
				}
					
				else {
					request.setAttribute("message", "Failed to add doctor.");
					request.setAttribute("Hospitals", hdao.getHospitals());
					request.setAttribute("Doctors", ddao.getAllDoctors());
				}
			}
			else {
				request.setAttribute("message", "Failed to add doctor.");
				request.setAttribute("Hospitals", hdao.getHospitals());
				request.setAttribute("Doctors", ddao.getAllDoctors());
			}

		}
		
		
		
		else if(action.equalsIgnoreCase("inserthospital")) {
			
			forward = "/admin/addhospital.jsp";
			
			Hospital h = new Hospital();
			
			String name = request.getParameter("name");
			String address = request.getParameter("address");
			
			//check data
			if(true) {
			

				h.setName(name);
				h.setAddress(address);
				
				
				//call dao
				int check = hdao.addHospital(h);
				
				if(check == 1) {
					request.setAttribute("message", "Success");
					request.setAttribute("Hospitals", hdao.getHospitals());
				}
					
				else {
					request.setAttribute("message", "Fail");
					request.setAttribute("Hospitals", hdao.getHospitals());
				}
			}
		}
		
		RequestDispatcher view = request.getRequestDispatcher(forward);
		view.forward(request, response);
	}

	/**
	 * Removes a doctor from the database. The Doctor must not have Apoointments that are scheduled.
	 * All Appointments are removed as well as the data from the User and Doctor table.
	 * @param username
	 * @param amka
	 * @return
	 */
	public boolean removeDoctor(String username, String amka) {
		
		List<Appointment> appointments = ddao.getScheduledAppointments(amka);

		Date date= new Date();
		
		long time = date.getTime();

		Timestamp ts = new Timestamp(time);

		for(Appointment a : appointments) {
			if(Timestamp.valueOf(a.getEndtime()).after(ts))
				return false;
		}
			
		adao.removeAppointments(amka);
		
		if(adao.removeDoctor(username) == 0)
			return false;
		
		return true;
		
		
		
	}
	
}
